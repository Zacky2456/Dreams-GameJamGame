<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grv = 0.15;
vsp = 0.00;
hsp = 0.00;
walksp = 2.00;
jumpsp = 2.75;
move_dir = 0;
xprev = xstart;
yprev = ystart;
_friction = 0.125;
dash_sp = 0;
in_dash = false;
// some of these variables are later updated
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dash_sp</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>in_dash</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>k_left= keyboard_check(ord("A"))||keyboard_check(vk_left)|| gamepad_button_check(0, gp_padl);
k_right = keyboard_check(ord("D"))||keyboard_check(vk_right)|| gamepad_button_check(0, gp_padr);
k_down = keyboard_check(ord("S"))||keyboard_check(vk_down)|| gamepad_button_check(0, gp_padd);
k_jump= keyboard_check_pressed(ord("W"))||keyboard_check_pressed(vk_space)|| gamepad_button_check_pressed(0, gp_face1);
k_jump_rel=keyboard_check_released(ord("W"))||keyboard_check_released(vk_space)|| gamepad_button_check_released(0, gp_face1);
k_dash = (keyboard_check_pressed(vk_lshift) || (k_down &amp;&amp; k_jump)) &amp;&amp; self.in_dash == false
floor_below = place_meeting(x, y+1, obj_floor);
just_jumped = false;

// Movement Calculation
var move_dir = k_right - k_left;
if move_dir != 0 and !self.in_dash {
    hsp = walksp * move_dir;
}

if not k_dash and k_jump and floor_below {

    vsp = 0;
    vsp = -jumpsp;
    just_jumped = true; // `just_jumped` is later used in squish squash section (currently removed)
    
} else if k_dash {
    
    self.in_dash = true;
    dash_sp = walksp*2;
    alarm[0] = 20;
    hsp += dash_sp*sign(image_xscale);

}

vsp += grv;
if hsp != 0 hsp -= _friction * sign(hsp)
//if -_friction*2 &lt; hsp &lt; _friction*2 hsp = 0 // to cramp hsp to 0 in case friction from both the sides starts to give it siezures

//  Checking for collision and then moving as per the calculated movement
if place_meeting(x+hsp, y, obj_floor){

    while !place_meeting(x+_sign(hsp), y, obj_floor){
    
        x += _sign(hsp);
        
    }
    
    hsp = 0;
    in_dash = false
    
}

xprev = x; // xprev and yprev are used for checking if the player was in collision in the previous frame, this will be usefull at multiple places
x += hsp;

if place_meeting(x, y+vsp, obj_floor){

    while not place_meeting(x, y+_sign(vsp), obj_floor){
    
        y += _sign(vsp);
        
    }
    
    vsp = 0;
    
}

yprev = y;
y += vsp;

// I have currently yeeted Animation code since the sprites aren't ready yet
/*
if floor_below {
   if self.hsp == 0 {
        sprite_index = spr_player_idle;
   } else {
        self.sprite_index = spr_player_run;
   }
} else {
    if self.vsp &lt; 0 {
        self.sprite_index = spr_player_jump;
    } else {
        self.sprite_index = spr_player_fall;
    }
}
*/

if hsp != 0 self.image_xscale= _sign(hsp)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation and Sprite Drawing

// Drawing Values for debuging
draw_text_transformed_color(
    5,
    5,
    "hsp: " + string(hsp),
    0.5,
    0.5,
    0,
    c_aqua,
    c_aqua,
    c_lime,
    c_lime,
    1
)

draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
